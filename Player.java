package update;



import java.awt.Color;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;


public class Player extends javax.swing.JFrame {

    Socket socket;
    BufferedReader input;
    PrintWriter output;
    int port = 1234;
    InetAddress address;
    String ServerAddress="localhost";
    String playername = "";
    boolean connected = false;
    String connectedNames;
    private boolean GamePlayed;
    private boolean request = false;
    

    public Player() {
        initComponents();

               PlayGameButton.setEnabled(false);
               setTitle("welcome - Kick It Out Game");

        ProcessPlayerList();
   }

    void ProcessClientConnection() {
        boolean finish = false;
        while (true) {
            playername = JOptionPane.showInputDialog(this, "Enter your name", "");
                finish = true;
                break;
               

        }
        if (finish) {

            try {
                address = InetAddress.getByName(ServerAddress);
                socket = new Socket(ServerAddress, port);
                input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                output = new PrintWriter(socket.getOutputStream(), true);
                output.println("Name:" + playername);
                output.flush();

            } catch (UnknownHostException ex) {

            } catch (IOException ex) {
          
            }
        } else {
      
        }
    }

    void ProcessGamePlay() {

        output.println("Play:" + playername);
        output.flush();
        System.out.println("Not start playing");
   

    }
private void LeavePlayArea() throws IOException {
    // Clear the displayed clients from the list
    DefaultListModel listModel = (DefaultListModel) playerarea.getModel();
    listModel.removeAllElements();
    playerarea.setModel(new DefaultListModel<>());
    playerarea.updateUI();

    // Notify the server that the player has finished the game
    output.println("Finishgame" + playername);
    output.flush();
}




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ConnectButton = new javax.swing.JButton();
        PlayGameButton = new javax.swing.JButton();
        AnswerField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        gamearea = new javax.swing.JTextArea();
        newPlayerNotificationsLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Connectedarea = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        playerarea = new javax.swing.JList<>();
        Leave = new javax.swing.JButton();
        Disconnect = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SCRAMBLE WORD!");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ConnectButton.setBackground(new java.awt.Color(102, 0, 204));
        ConnectButton.setFont(new java.awt.Font("Algerian", 0, 14)); // NOI18N
        ConnectButton.setForeground(new java.awt.Color(255, 255, 255));
        ConnectButton.setText("Connect");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ConnectButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 470, 100, 40));

        PlayGameButton.setBackground(new java.awt.Color(102, 0, 204));
        PlayGameButton.setFont(new java.awt.Font("Algerian", 0, 14)); // NOI18N
        PlayGameButton.setForeground(new java.awt.Color(255, 255, 255));
        PlayGameButton.setText("Play");
        PlayGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayGameButtonActionPerformed(evt);
            }
        });
        getContentPane().add(PlayGameButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 470, 210, 40));

        AnswerField.setFont(new java.awt.Font("Castellar", 0, 18)); // NOI18N
        AnswerField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        AnswerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnswerFieldActionPerformed(evt);
            }
        });
        getContentPane().add(AnswerField, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 460, 180, 40));

        jButton1.setBackground(new java.awt.Color(102, 0, 204));
        jButton1.setFont(new java.awt.Font("Algerian", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("submit Answer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 460, 160, 40));

        gamearea.setEditable(false);
        gamearea.setBackground(new java.awt.Color(255, 255, 255));
        gamearea.setColumns(20);
        gamearea.setFont(new java.awt.Font("Castellar", 0, 20)); // NOI18N
        gamearea.setRows(5);
        gamearea.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        jScrollPane2.setViewportView(gamearea);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 280, 330, 160));
        getContentPane().add(newPlayerNotificationsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 76, 20));

        Connectedarea.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.black, java.awt.Color.white, java.awt.Color.black));
        Connectedarea.setFont(new java.awt.Font("Castellar", 0, 22)); // NOI18N
        Connectedarea.setName("Connectedarea"); // NOI18N
        jScrollPane3.setViewportView(Connectedarea);
        Connectedarea.getAccessibleContext().setAccessibleName("CONNECTED \nPLAYERS");

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 280, 200, 160));

        playerarea.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.black, java.awt.Color.white, java.awt.Color.black));
        playerarea.setFont(new java.awt.Font("Castellar", 0, 18)); // NOI18N
        jScrollPane1.setViewportView(playerarea);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 280, 210, 160));

        Leave.setBackground(new java.awt.Color(102, 0, 204));
        Leave.setFont(new java.awt.Font("Algerian", 0, 14)); // NOI18N
        Leave.setForeground(new java.awt.Color(255, 255, 255));
        Leave.setText("Leave Room");
        Leave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaveActionPerformed(evt);
            }
        });
        getContentPane().add(Leave, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 590, 230, 60));

        Disconnect.setBackground(new java.awt.Color(204, 204, 255));
        Disconnect.setFont(new java.awt.Font("Algerian", 0, 14)); // NOI18N
        Disconnect.setForeground(new java.awt.Color(255, 255, 255));
        Disconnect.setText("Disconnect");
        Disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisconnectActionPerformed(evt);
            }
        });
        getContentPane().add(Disconnect, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 470, 110, 40));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/update/5.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-110, -110, 1520, 900));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        output.println("end#" + playername); 
        output.flush();      
    }//GEN-LAST:event_formWindowClosed

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed

        if (!connected) {
            ProcessClientConnection();
            ConnectButton.setText("connected");
            ConnectButton.setBackground(Color.green);
            connected = true;
            PlayGameButton.setEnabled(true);
        }     
        ProcessPlayerList();

    }//GEN-LAST:event_ConnectButtonActionPerformed

    private void PlayGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayGameButtonActionPerformed
            PlayGameButton.setBackground(Color.pink);
       
        if (connected) {
            if (!GamePlayed) {
                request = true;
                
                GamePlayed = true;
                ProcessGamePlay();
            } 
        } else {
            JOptionPane.showMessageDialog(null, "Sorry, You Cann\'t play game before you connect to server", "Error Playing", JOptionPane.ERROR_MESSAGE);
        }
        ProcessPlayerList();
      
    }//GEN-LAST:event_PlayGameButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            if (output != null) {
                output.println("end#" + playername);
                output.flush();
                output.close();
                input.close();
                socket.close();
            }
        } catch (IOException ex) {
           
        }

    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (AnswerField.getText() != null && AnswerField.getText().length() > 0) {

            if (output != null) {
         
                output.println("Answer " + playername + " " + AnswerField.getText());
                output.flush();

            }
            AnswerField.setText("");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void leaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaveActionPerformed
           gamearea.setText(" ");
           Leave.setBackground(Color.pink);
          GamePlayed=false;
        try {
            LeavePlayArea();
        } catch (IOException ex) {
            Logger.getLogger(Player.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_leaveActionPerformed

    
    
    private void DisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisconnectActionPerformed
    // TODO add your handling code here:
    output.println("Disconnect");
    output.flush();
    connected=false;
    resetgamearea();
    DefaultListModel<String> model = new DefaultListModel<>();
    Connectedarea.setModel(model);
    DefaultListModel<String> model2 = new DefaultListModel<>();
    playerarea.setModel(model2);
    ConnectButton.setBackground(Color.orange);
    Disconnect.setBackground(Color.pink);
    try{
    input.close();
    output.close();
    socket.close();
    }
    catch(IOException e){
        
    }
    }//GEN-LAST:event_DisconnectActionPerformed

    private void AnswerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnswerFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AnswerFieldActionPerformed
    public void publishClientList(String Clients) {
        if (Clients.contains("Score")) { 
            Clients = Clients.replace(playername + " Score= 0 Playing ", "");
            Clients = Clients.replace(playername + "Score= 0 Connected ", "");
            String[] allPlayers = Clients.split("#");
            ArrayList<String> Players = new ArrayList<String>();
            ArrayList<String> connectors = new ArrayList<String>();

            for (int i = 0; i < allPlayers.length; i++) {
                if (allPlayers[i].contains("Playing")) {
                    Players.add(allPlayers[i].replace("Playing", "").replace("#", "/n"));
                }else
connectors.add(allPlayers[i].replace("Score", " is ").replace("#", "/n"));
            }
            
            playerarea.setModel(new DefaultListModel<String>() {

                @Override
                public int getSize() {
                    return Players.size();
                }

                @Override
                public String getElementAt(int i) {
                    return Players.get(i);
                }
            });
            Connectedarea.setModel(new DefaultListModel<String>() {

                @Override
                public int getSize() {
                    return connectors.size();
                }

                @Override
                public String getElementAt(int i) {
                    return connectors.get(i);
                }
            });
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Player().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AnswerField;
    private javax.swing.JButton ConnectButton;
    private javax.swing.JList<String> Connectedarea;
    private javax.swing.JButton Disconnect;
    private javax.swing.JButton Leave;
    private javax.swing.JButton PlayGameButton;
    private javax.swing.JTextArea gamearea;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel newPlayerNotificationsLabel;
    private javax.swing.JList<String> playerarea;
    // End of variables declaration//GEN-END:variables
 

private void ProcessPlayerList() {
    
    if (connected) {
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    while (true) {
                        connectedNames = input.readLine();
                        if (connectedNames != null) {
                            if (connectedNames.contains("Notify:")) {
                                connectedNames.replace("Notify:", "");
                                newPlayerNotificationsLabel.setText(connectedNames);
                                Thread.sleep(100);
                                newPlayerNotificationsLabel.setText("");
                                publishClientList(connectedNames);
                            }
                            publishClientList(connectedNames);
                             
                            if (GamePlayed) {
                                if (connectedNames.contains("Waiting")) {
                                    gamearea.setText(connectedNames);
                                } else if (connectedNames.contains("Number")) {
                                    gamearea.setText(connectedNames);
                                } else if (connectedNames.contains("Question") && !connectedNames.contains("Ranking") && !connectedNames.contains("Playing")) {
                                    String x = connectedNames.replace("Question", "");
                                    gamearea.setText("Try to form a word of each set of letters \n" + x);
                                } else if (connectedNames.contains("stop")) {
                                    String x = connectedNames.replace("stop", "");
                                  
                                    if(x.contains("No")){
                                       Thread.sleep(30000);
                                        stopProcess();}
                                    else{
                                         String w= connectedNames;
                                         setMassage(w);
                                        gamearea.setText(w);
                                        winnerProcess();}
                                    
                                } else if ((connectedNames.contains("Ranking"))) {
                                    String rank = connectedNames.replace("#", "\n");
                                    resetgamearea();
                                    gamearea.setText(getMassage() +rank);
                                } else {
                                    publishClientList(connectedNames);
                                }
                            }
                        }
                    }
                } catch (IOException ex) {
                    
                } catch (InterruptedException ex) {
                    Logger.getLogger(Player.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

           
        });
        t.start();
    }
}
String m;

private void setMassage(String w) {
    m=w+"\n";
            }
private String getMassage() {
   
          return m;  }

private void resetgamearea() {
    gamearea.setText(" ");
}

private void winnerProcess() {
    
    DefaultListModel listModel = (DefaultListModel) playerarea.getModel();
    listModel.removeAllElements();
    playerarea.setModel(new DefaultListModel<>());
    playerarea.updateUI();
    output.println("done");
    PlayGameButton.setEnabled(true);
}

private void stopProcess() {
    
    resetgamearea();   
    DefaultListModel listModel = (DefaultListModel) playerarea.getModel();
    listModel.removeAllElements();
    playerarea.setModel(new DefaultListModel<>());
    playerarea.updateUI();
    output.println("done");
    JOptionPane.showMessageDialog(null, "Game Over No Winner");
}
}
